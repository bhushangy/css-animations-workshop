@import '../styles/base.scss';

:root {
  --color-gray: #8c97b7;
  --color-blue: #1c38f1;
  --color-green: #1fcdb0;
  --input-height: 3rem;
  --transition-duration: 0.3s;
  --transition-easing: cubic-bezier(0.5, 0, 0.5, 1);
  --animation-duration: 0.8s;
}
body {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #f9fbff;
}

.ui-form {
  background: #fff;
  box-shadow: 0 0.5rem 1rem #0003;
  padding: 1rem;
  border-radius: 0.25rem;
  display: grid;
  grid-template-columns: 1fr auto;
  grid-template-rows: 1fr;
  grid-column-gap: 1rem;
  grid-template-areas: 'input button';

  // Add an animation here
  animation-name: slide-up;
  animation-duration: 0.6s;
  animation-timing-function: ease-in-out;

  --color: var(--color-gray);
  &:focus-within {
    --color: var(--color-blue);
  }

  > .ui-input,
  > .ui-button {
    // Add an animation here
    animation-name: slide-up;
    animation-delay: 0.6s;
    animation-timing-function: ease-in-out;
    animation-duration: 0.6s;
    animation-fill-mode: both;
    // The reason why we need to have aimation-fill mode both here and not in the parent is because, this animation
    // only starts after the parent animation is done. Since these are children of teh form, they will be visible
    // along with the form. So in order to apply the opacity 0 initially only, we need to have animation-fill-mode.
  }
}

.ui-input {
  grid-area: input;
  padding: 0 1rem;
  height: var(--input-height);
  border: 2px solid var(--color);
  border-radius: 0.25rem;
  outline: none;
  transition: inherit;

  &:invalid:not(:focus) {
    animation: shake 0.5s;
  }
}

.ui-button {
  grid-area: button;
  border: none;
  padding: 0 1rem;
  color: white;
  font-weight: bold;
  border-radius: 0.25rem;
  height: var(--input-height);
  background-color: var(--color);
  transition: inherit;
}

[data-show]:not([data-active]) {
  display: none;
}

.ui-form {
  overflow: hidden;
}

@keyframes slide-up {
  // Add keyframes here
  from {
    opacity: 0;
    transform: translateY(100%);
    // So, the element starts from 100%. It does start from initail position and then snap to 100% and then start animating.
    // No. It starts out at 100%.
  }

  50%,
  to {
    opacity: 1;
  }

  to {
    transform: none;
    // Meaning ending position is the same as the
  }
}

@keyframes shake {
  // Add a shake animation here
  from,
  to {
    transform: none;
    // Meaning starting and ending positions are the same as it was before any animation was applied
  }

  20%,
  60% {
    transform: translate(-10%);
  }

  40%,
  80% {
    transform: translate(10%);
  }
}

// 0% to 20% - Translate on x axis -10%
// 20% to 40% - Translate on x axis +10%. Now this 10% is not -10% + 10% = 0. Nope. It is 10% relative to initial position which is 0.
// So it will go all the way to the right of 0 from -10 and does not stop at 0.
// 40% to 60% - Translate on x axis -10%. Again -10% relative to original position which is 0. So moves all the way left/
// 60% to 80% - Translate on x axis +10%
// 80% to 100% - Translate on x axis none which is initial position
