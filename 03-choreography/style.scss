@import '../styles/base.scss';

:root {
  --color-gray: #8c97b7;
  --color-blue: #1c38f1;
  --color-green: #1fcdb0;
  --input-height: 3rem;
  --transition-duration: 0.3s;
  --transition-easing: cubic-bezier(0.5, 0, 0.5, 1);
  --animation-duration: 0.8s;
  --animation-stagger: 0.3s;
}
body {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #f9fbff;
}

.ui-form {
  background: #fff;
  box-shadow: 0 0.5rem 1rem #0003;
  padding: 1rem;
  border-radius: 0.25rem;
  display: grid;
  grid-template-columns: 1fr auto;
  grid-template-rows: 1fr;
  grid-column-gap: 1rem;
  grid-template-areas: 'input button';
  transition: all var(--transition-duration) var(--transition-easing);
  will-change: transform;

  --color: var(--color-gray);
  &:focus-within {
    --color: var(--color-blue);
  }

  // We also want to shake the form after all the animation is complete.
  // For this we would need to add all the animation duration and delays.
  // Because shake onlt runs after al the animations have run.
  // So we need to add up all the animation duration add it to the total duration.

  // Can we run two different animations on the same element at the same time without any delay added for the second animation?
  // No, the latter animation overrides because there is conflict for the transform property.

  --input-duration: var(--animation-duration);
  --button-duration: var(--animation-duration);
  --total-duration: calc(
    var(--animation-duration) + var(--input-duration) + var(--button-duration) -
      var(--animation-stagger) * 2
  );

  animation: slide-up var(--animation-duration) var(--transition-easing),
    shake var(--animation-duration) var(--total-duration);

  > .ui-input,
  > .ui-button {
    // Add animations here
    animation: slide-up var(--animation-duration) both var(--transition-easing);
  }

  > .ui-input {
    animation-delay: calc(var(--animation-duration) - var(--animation-stagger));
  }
  > .ui-button {
    animation-delay: calc(
      var(--animation-duration) + var(--input-duration) -
        var(--animation-stagger) * 2
    );
  }
}

.ui-input {
  grid-area: input;
  padding: 0 1rem;
  height: var(--input-height);
  border: 2px solid var(--color);
  border-radius: 0.25rem;
  outline: none;
  transition: inherit;
}

.ui-button {
  grid-area: button;
  border: none;
  padding: 0 1rem;
  color: white;
  font-weight: bold;
  border-radius: 0.25rem;
  height: var(--input-height);
  background-color: var(--color);
  transition: inherit;
}

[data-show]:not([data-active]) {
  display: none;
}

.ui-form {
  overflow: hidden;
}

@keyframes slide-up {
  from {
    opacity: 0;
    transform: translateY(100%);
  }
  to {
    opacity: 1;
    transform: none;
  }
}

@keyframes shake {
  20%,
  40%,
  60%,
  80% {
    transform: translateX(1%);
  }
  10%,
  30%,
  50%,
  70%,
  90% {
    transform: translateX(-1%);
  }
  from,
  to {
    transform: none;
  }
}

// Choreography - Multiple html elements on the page coordinating with each other and animating themselves to
// make it look like one single animation in the end.

// Use css variables to coordinate animations between elements.

// A child first checks its parent for custom variables, if it doesn't find it, it checks the root element.
